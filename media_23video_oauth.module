<?php
/**
 * @file
 * Media 23Video OAuth module file.
 */

/**
 * Implements hook_menu().
 */
function media_23video_oauth_menu() {
  $items = array();

  $items['admin/config/media/media_23video'] = array(
    'title' => 'Media 23Video settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_23video_oauth_admin_form'),
    'access arguments' => array('administer media_23video_oauth'),
  );

  $items['media-23video-callback'] = array(
    'title' => 'Media 23Video Callback',
    'description' => 'Callback for uploading videos to 23Video',
    'page callback' => 'media_23video_oauth_callback',
    'access arguments' => array('access media_23video'),
  );

  $items['media-23video-uploadtoken'] = array(
    'title' => 'Media 23Video get upload token',
    'description' => 'Callback for fetching upload token from 23Video server',
    'page callback' => 'media_23video_oauth_uploadtoken_callback',
    'access arguments' => array('access media_23video'),
  );

  $items['media-23video-sessiontoken'] = array(
    'title' => 'Media 23Video session token',
    'description' => 'Callback for getting new session token and showing video',
    'page callback' => 'media_23video_oauth_sessiontoken_callback',
    'access arguments' => array('access media_23video'),
    'page arguments' => array(1, 2),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function media_23video_oauth_permission() {
  return array(
    'administer media_23video_oauth' => array(
      'title' => t('administer media_23video_oauth'),
      'description' => t('administer media_23video_oauth'),
      'restrict access' => TRUE,
    ),
    'access media_23video' => array(
      'title' => t('access media_23video'),
      'description' => t('Access to view videos from 23Video'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Implements hook_help().
 */
function media_23video_oauth_help($path) {
  $output = '';
  switch ($path) {
    case 'admin/help#media_23video_oauth':
      $file = dirname(__FILE__) . '/README.txt';
      if (file_exists($file)) {
        $output .= check_plain(file_get_contents($file));
      }
      $output = '<pre>' . $output . '</pre>';
      return $output;
  }
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/23video mimetype.
 */
function media_23video_oauth_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/23video-oauth';
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_23video_oauth_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function media_23video_oauth_stream_wrappers() {
  return array(
    '23video-oauth' => array(
      'name' => t('23Video'),
      'class' => 'Media23VideoOauthStreamWrapper',
      'description' => t('Videos provided by 23Video.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_23video_oauth_theme($existing, $type, $theme, $path) {
  return array(
    'media_23video_error' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'media_23video_oauth.theme.inc',
      'path' => $path . '/themes',
      'template' => 'media-23video-error',
    ),
    'media_23video_video' => array(
      'variables' => array('login_token' => NULL, 'options' => array()),
      'file' => 'media_23video_oauth.theme.inc',
      'path' => $path . '/themes',
      'template' => 'media-23video-video',
    ),
    'media_23video_preview' => array(
      'variables' => array('url' => NULL, 'options' => array()),
      'file' => 'media_23video_oauth.theme.inc',
      'path' => $path . '/themes',
      'template' => 'media-23video-preview',
    ),
  );
}

/**
 * Implements hook_file_formatter_info().
 */
function media_23video_oauth_file_formatter_info() {
  $formatters['media_23video_oauth_video'] = array(
    'label' => t('23Video'),
    'file types' => array('video'),
    'default settings' => array(
      'width' => 480,
      'height' => 270,
      'autoplay' => 0,
    ),
    'view callback' => 'media_23video_oauth_file_formatter_video_view',
    'settings callback' => 'media_23video_oauth_file_formatter_video_settings',
  );

  $formatters['media_23video_oauth_image'] = array(
    'label' => t('23Video Preview Image'),
    'file types' => array('video'),
    'default settings' => array(
      'image_style' => 'image_thumbnail',
    ),
    'view callback' => 'media_23video_oauth_file_formatter_image_view',
    'settings callback' => 'media_23video_oauth_file_formatter_image_settings',
  );
  return $formatters;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_23video_oauth_file_formatter_video_view($file, $display, $langcode) {
  $uri = $file->uri;
  $media = new Media23VideoOauthStreamWrapper();
  $media->setUri($uri);
  $video_url = $media->interpolateUrl();

  // Always get a new session.
  $consumer = Media23VideoOauthConnector::getInstance();
  if ($consumer->error) {
    $element = array(
      '#theme' => 'media_23video_error',
      '#options' => array(
        'message' => $consumer->error,
      ),
    );
    return $element;
  }
  $session_token = $consumer->doGetSessionToken($video_url);

  $url = variable_get('media_23video_oauth_service_site_url') . '/api/session/redeem-token?session_token=' . $session_token['sessiontoken']['access_token'];

  $element = array(
    '#theme' => 'media_23video_video',
    '#options' => array(
      'url' => $url,
    ),
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_23video_oauth_file_formatter_video_settings($form, &$form_state, $settings) {
  $element = array();

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );

  $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_23video_oauth_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == '23video-oauth') {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $image_style = $display['settings']['image_style'];
    $valid_image_styles = image_style_options(FALSE);

    // Always get a new 23video session token.
    $url = '/media-23video-sessiontoken/' . intval($file->fid);

    if (empty($image_style) || !isset($valid_image_styles[$image_style])) {
      $element = array(
        '#theme' => 'media_23video_preview',
        '#options' => array(
          'thumbnail' => $wrapper->getOriginalThumbnailPath(),
          'fid' => $file->fid,
        ),
        '#url' => $url,
        '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
      );
    }
    else {
      $element = array(
        '#theme' => 'media_23video_preview',
        '#style_name' => $image_style,
        '#options' => array(
          'thumbnail' => $wrapper->getOriginalThumbnailPath(),
          'fid' => $file->fid,
        ),
        '#url' => $url,
        '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
      );
    }

    return $element;
  }
}

/**
 * Admin settings form.
 */
function media_23video_oauth_admin_form($form, &$form_state) {
  $form[] = array();

  $form['media_23video_oauth_service_site_url'] = array(
    '#type' => 'textfield',
    '#title' => t('23 Video site URL'),
    '#description' => t('URL to your 23 Video site, e.g., http://example.23video.com/'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_site_url', 'http://example.23video.com'),
  );

  $form['media_23video_oauth_service_api_key_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer pulic Key'),
    '#description' => t('To work with 23 Video, Drupal needs the application consumer key.'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_api_key_public', ''),
  );

  $form['media_23video_oauth_service_api_key_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('To work with 23 Video, Drupal needs the application secret key.'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_api_key_secret', ''),
  );
  $form['media_23video_oauth_service_api_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Access token'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_api_access_token', ''),
  );

  $form['media_23video_oauth_service_api_access_token_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Access token secret'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_api_access_token_secret', ''),
  );

  $form['media_23video_oauth_service_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Api url'),
    '#description' => t('Api url. Exmple http://api.visualplatform.net/oauth/'),
    '#required' => TRUE,
    '#default_value' => variable_get('media_23video_oauth_service_api_url', 'http://api.visualplatform.net/oauth/'),
  );

  // Get album list.
  $consumer = Media23VideoOauthConnector::getInstance();

  if ($consumer->error) {
    $form['media_23video_oauth_service_album_default'] = array(
      '#markup' => '<strong>' . t("Error loading library: !error", array('!error' => $consumer->error)) . '</strong>',
    );
  }
  else {
    $album_list = $consumer->doAlbumList();

    if ($album_list['status'] == 'ok' && isset($album_list['albums']) && is_array($album_list['albums']) && count($album_list['albums'])) {
      // Select default album.
      $albums = array('' => t('- choose album -'));
      foreach ($album_list['albums'] as $album) {
        $albums[$album['album_id']] = $album['title'];
      }

      $form['media_23video_oauth_service_album_default'] = array(
        '#type' => 'select',
        '#title' => t('Default album'),
        '#required' => TRUE,
        '#options' => $albums,
        '#default_value' => variable_get('media_23video_oauth_service_album_default', ''),
      );
    }
    elseif ($album_list['status'] != 'ok') {
      // Display error message.
      $form['media_23video_oauth_service_album_default'] = array(
        '#markup' => '<strong>' . t("Error communicating with web service. Error: @message. Code: @code", array(
            '@message' => $album_list['message'],
            '@code' => $album_list['code'],
          )) . '</strong>',
      );
    }

    // Get user list.
    $user_list = $consumer->doUserList();

    if (isset($user_list['status']) && $user_list['status'] == 'ok' && is_array($user_list['users'])) {
      $users = array('' => t('- choose user -'));
      foreach ($user_list['users'] as $user) {
        $users[$user['user_id']] = $user['username'] . ' - ' . $user['display_name'] . ' (' . $user['email'] . ')';
      }

      $form['media_23video_oauth_service_user_default'] = array(
        '#type' => 'select',
        '#title' => t('Default user'),
        '#required' => TRUE,
        '#options' => $users,
        '#default_value' => variable_get('media_23video_oauth_service_user_default', ''),
      );
    }
  }
  return system_settings_form($form);
}

/**
 * Media browser plugin info.
 */
function media_23video_oauth_media_browser_plugin_info() {
  $info['23video-oauth'] = array(
    'title' => t('23Video'),
    'class' => 'Media23VideoOauthBrowser',
  );

  return $info;
}

/**
 * Implement thumbnail in media viewer, etc.
 *
 * Implements hook_file_displays_alter().
 */
function media_23video_oauth_file_default_displays_alter(&$file_displays) {
  // Video previews should be displayed using a large filetype icon.
  $file_display = new stdClass();
  $file_display->api_version = 1;
  $file_display->name = 'video__default__media_23video_oauth_video';
  $file_display->weight = 0;
  $file_display->status = TRUE;
  $file_display->settings = array(
    'width' => '640',
    'height' => '390',
    'theme' => 'dark',
    'color' => 'red',
    'autohide' => '2',
    'autoplay' => 0,
    'loop' => 0,
    'showinfo' => 1,
    'modestbranding' => 0,
    'rel' => 1,
    'nocookie' => 0,
    'protocol_specify' => 0,
    'protocol' => 'https:',
    'enablejsapi' => 0,
    'origin' => '',
  );
  $file_displays['video__default__media_23video_oauth_video'] = $file_display;

  $file_display = new stdClass();
  $file_display->api_version = 1;
  $file_display->name = 'video__preview__media_23video_oauth_image';
  $file_display->weight = 0;
  $file_display->status = TRUE;
  $file_display->settings = array(
    'image_style' => 'media_thumbnail',
  );
  $file_displays['video__preview__media_23video_oauth_image'] = $file_display;

  $file_display = new stdClass();
  $file_display->api_version = 1;
  $file_display->name = 'video__preview__media_23video_oauth_thumbnail';
  $file_display->weight = 0;
  $file_display->status = TRUE;
  $file_display->settings = array(
    'image_style' => 'media_thumbnail',
  );
  $file_display->export_module = 'media_23video_oauth';
  $file_displays['video__preview__media_23video_oauth_thumbnail'] = $file_display;

  $file_display = new stdClass();
  $file_display->api_version = 1;
  $file_display->name = 'video__teaser__media_23video_oauth_video';
  $file_display->weight = 0;
  $file_display->status = TRUE;
  $file_display->settings = array(
    'width' => '560',
    'height' => '340',
    'theme' => 'dark',
    'color' => 'red',
    'autohide' => '2',
    'autoplay' => 0,
    'loop' => 0,
    'showinfo' => 1,
    'modestbranding' => 0,
    'rel' => 1,
    'nocookie' => 0,
    'protocol_specify' => 0,
    'protocol' => 'https:',
    'enablejsapi' => 0,
    'origin' => '',
  );
  $file_displays['video__teaser__media_23video_oauth_video'] = $file_display;
}

/**
 * Upload form.
 */
function media_23video_oauth_upload($form, &$form_state) {
  // Add header to allow cross-domain ajax access.
  $service_url = variable_get('media_23video_oauth_service_site_url', '');
  drupal_add_http_header('Access-Control-Allow-Origin', $service_url);

  $service_url = variable_get('media_23video_oauth_service_site_url', '');

  $form['#action'] = $service_url . '/api/photo/redeem-upload-token';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
  );

  $form['album_id'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('media_23video_oauth_service_album_default', ''),
  );

  $form['upload_file'] = array(
    '#type' => 'file',
    '#name' => 'file',
    '#title' => t('Choose a file'),
    '#theme_wrappers' => array(),
    '#attributes' => array(
      'accept' => 'video/*',
    ),
  );

  $form['upload_token'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  // Add jquery form as a library.
  drupal_add_library('system', 'jquery.form');

  $form['submit'] = array(
    '#markup' => '<input type="button" id="edit-submit" value="' . t('Send') . '" class="form-submit">',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'media_23video_oauth') . '/js/async_upload.js',
      ),
    ),
  );

  $form['throbber'] = array(
    '#type' => 'markup',
    '#markup' => '<strong id="upload-status"></strong>',
    '#suffix' => '<div class="ajax-progress ajax-progress-throbber"><div class="">&nbsp;</div></div>',
  );

  return $form;
}

/**
 * Form for submitting photo_id after successful upload.
 */
function media_23video_oauth_attach($form, &$form_state) {
  $form['attach'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div style="visibility: hidden">',
    '#suffix' => '</div>',
  );

  $form['attach']['photo_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
  );

  $form['attach']['title'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form['attach']['token'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form['attach']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'attach',
  );

  return $form;
}

/**
 * Submit form for submitting photo_id.
 */
function media_23video_oauth_attach_submit($form, &$form_state) {
  if (isset($form_state['input']['photo_id']) && $form_state['input']['photo_id']) {
    // Create file from uploaded video info.
    $title = $form_state['input']['title'];
    $parsed = parse_url(variable_get('media_23video_oauth_service_site_url'));
    $uri = '23video-oauth://s/' . $parsed['host'] . '/v/' . intval($form_state['input']['photo_id']) . '/t/' . check_plain($form_state['input']['token']);
    $file = file_uri_to_object($uri);
    $file->type = 'video';
    $file->filename = $title;
    if (!isset($file->fid)) {
      $file->fid = 0;
    }

    // Save file.
    try {
      file_save($file);
      $form_state['file'] = $file;
    }
    catch (Exception $e) {
      drupal_set_message(t("Couldn't save file"), 'error');
    }
  }
}

/**
 * Callback function after uploading files to 23Video.
 */
function media_23video_oauth_callback() {
  $params = drupal_get_query_parameters();

  // Print out all parameters as json.
  print drupal_json_encode($params);
  // Don't display anything else.
  drupal_exit();
}

/**
 * Callback for after an upload token has been received.
 */
function media_23video_oauth_uploadtoken_callback() {
  global $base_url;

  $params = drupal_get_query_parameters();
  $title = isset($params['title']) ? urldecode($params['title']) : '';
  $description = isset($params['description']) ? urldecode($params['description']) : '';
  $album_id = isset($params['description']) ? urldecode($params['album_id']) : '';

  $consumer = Media23VideoOauthConnector::getInstance();
  if ($consumer->error) {
    print drupal_json_encode(array('error' => $consumer->error));
    drupal_exit();
  }
  $upload_token = $consumer->doGetUploadToken($title, $description, $album_id, $base_url . '/media-23video-callback');
  $params = array(
    'title' => $title,
    'description' => $description,
    'upload_token' => $upload_token,
  );

  print drupal_json_encode($params);
  drupal_exit();
}

/**
 * Callback for generating 23video session token and redirect to video player.
 *
 * @param int $fid
 *   File id.
 *
 * @return bool
 *   Return FALSE if fid is not valid
 */
function media_23video_oauth_sessiontoken_callback($fid = NULL) {
  if (!$fid) {
    return FALSE;
  }

  // Get file.
  $file = file_load($fid);
  // If file is not valid, error.
  if (!$file) {
    return FALSE;
  }

  // Get video url.
  $uri = $file->uri;
  $media = new Media23VideoOauthStreamWrapper();
  $media->setUri($uri);
  $video_url = $media->interpolateUrl();

  // Get session token url.
  $consumer = Media23VideoOauthConnector::getInstance();
  $session_token = $consumer->doGetSessionToken($video_url);

  // Go to redeem token url, which will redirect to the video player.
  $url = variable_get('media_23video_oauth_service_site_url') . '/api/session/redeem-token?session_token=' . $session_token['sessiontoken']['access_token'];
  drupal_goto($url);
}

/**
 * Implements hook_libraries_info().
 */
function media_23video_oauth_libraries_info() {
  $libraries['23video-for-php'] = array(
    'name' => '23video-for-php',
    'vendor url' => 'http://23video.com',
    'download url' => 'https://github.com/23/23video-for-php',
    'files' => array(
      'php' => array(
        'visualvideo.php',
      ),
    ),
    'version arguments' => array(
      'file' => 'visualvideo.php',
      'pattern' => '/(API client[^\.]+)/',
    ),
  );

  return $libraries;
}
